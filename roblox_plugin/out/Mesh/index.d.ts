import { loadFromBuffer } from "./loadFromBuffer";
import { loadFromMesh } from "./loadFromMesh";
import { renderContent } from "./renderContent";
import { splitMesh } from "./splitMesh";
export declare class Mesh {
    contents: Content[] | undefined;
    hasUVs: boolean;
    hasColors: boolean;
    minBounds: Vector3;
    maxBounds: Vector3;
    meshSize: Vector3;
    vertices: Vector3[];
    vertsCount: number;
    edgesCount: number;
    trisCount: number;
    edgeStartVIs: number[];
    edgeEndVIs: number[];
    edgeInvVecs: Vector3[];
    fc1VI: number[];
    fc2VI: number[];
    fc3VI: number[];
    fEI1: number[];
    fEI2: number[];
    fEI3: number[];
    fc1N: Vector3[];
    fc2N: Vector3[];
    fc3N: Vector3[];
    fc1UV: Vector2[];
    fc2UV: Vector2[];
    fc3UV: Vector2[];
    fc1Col: Color3[];
    fc1CA: number[];
    fc2Col: Color3[];
    fc2CA: number[];
    fc3Col: Color3[];
    fc3CA: number[];
    chunks: Vector3;
    protected edgeSplitEIs: Map<number, number>;
    protected edgeSplitAlphas: Map<number, number>;
    protected edgeSplitVIs: Map<number, number>;
    loadFromBuffer: typeof loadFromBuffer;
    loadFromMesh: typeof loadFromMesh;
    renderContent: typeof renderContent;
    splitMesh: typeof splitMesh;
    constructor(bufferOrMesh: buffer);
    constructor(bufferOrMesh: Mesh, chunks: Vector3);
}
